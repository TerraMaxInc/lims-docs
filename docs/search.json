[
  {
    "objectID": "pages/user-resources/vocabulary.html",
    "href": "pages/user-resources/vocabulary.html",
    "title": "Vocabulary and Naming Convetions",
    "section": "",
    "text": "Stage\nParent/Child\nIngredient\nRecipe\nInput"
  },
  {
    "objectID": "pages/user-resources/user-index.html",
    "href": "pages/user-resources/user-index.html",
    "title": "User Resources",
    "section": "",
    "text": "Tech Overview\nDeployment\nVersions and Settings\nGeneral Use Patterns\nTabs and Stages\nAdding and Editing Data\nVocabulary and Naming Conventions"
  },
  {
    "objectID": "pages/user-resources/user-index.html#quick-links",
    "href": "pages/user-resources/user-index.html#quick-links",
    "title": "User Resources",
    "section": "",
    "text": "Tech Overview\nDeployment\nVersions and Settings\nGeneral Use Patterns\nTabs and Stages\nAdding and Editing Data\nVocabulary and Naming Conventions"
  },
  {
    "objectID": "pages/user-resources/user-index.html#summary",
    "href": "pages/user-resources/user-index.html#summary",
    "title": "User Resources",
    "section": "Summary",
    "text": "Summary\nThis section is a colletion of reference documents for non-technical users to help them understand and use LIMS.\nTech Overview summarizes how the technical components are structured and work together.\nDeployment explains the process of downloading and installing the application onto a user’s computer.\nVersions and Settings discusses how to check that your version is the most up to date, and to change settings that affect Read Only mode, Test Mode, and the daterange of data you want the application to fetch from the database.\nGeneral Use Patterns explains when and how the app updates the data it displays, how to refresh it yourself, and walks through the things all tabs have in common like filtering by microbe, clearing the form, and sorting the data grid.\nTabs and Stages describes the flow from mother stock to final product, the stages in this flow, and the logic behind why they’re split the way they are.\nAdding and Editing Data continues some of the topics from Tabs and Stages to go into more detail about how adding or editing data in one tab affects the next, and how the relationships from one stage to the next affects what the app allows you to do.\nVocabulary and Naming Conventions"
  },
  {
    "objectID": "pages/user-resources/tabs-and-stages.html",
    "href": "pages/user-resources/tabs-and-stages.html",
    "title": "Tabs and Stages",
    "section": "",
    "text": "One tab for each “stage”, stages are based off careful discussion with lab about their process; an attempt to model the real process as best as possible with the data structure\noverall process flow\nstages are points in the production cycle have a batch number have either one microbial parent, or one or more microbial ingredients from the previous stage (except mother) are used as a parent or ingredient in the next stage (expect product)\nall of these were pretty intuitive off the exisiting paperwork, except the drydown process splitting into stabilized and powder here the stages were decided because of the structure of the flow: a ferment might be split into many SL, and one SL might be split into many DMP DMP includes the liquid phase right before actual dry down, when some ingredients are added last minute there’s arguably also a DDL stage, except one DDL doesn’t ever split into multiple DPM SL and DMP could be argued as one big stage, except SL DOES sometimes (albeit rarely) get split into multiple DDL & DMP the exact lines of whether an input is added during the SL stage or the liquid half of the DMP stage not your problem, now handled by the auto-generated recipe\nparent/child (one-to-many) relationships vs recipe ingredients (many-to-many)\nlist the stages all out? Diagram? Def Diagram of parent/child vs recipe ingredients"
  },
  {
    "objectID": "pages/user-resources/deployment.html",
    "href": "pages/user-resources/deployment.html",
    "title": "Deployment",
    "section": "",
    "text": "This document explains step-by-step how to get the LIMS application set up on your computer, and then gives a brief summary of what files have been installed on your computer, how they interact, and how to delete them safely."
  },
  {
    "objectID": "pages/user-resources/deployment.html#how-to-set-it-up",
    "href": "pages/user-resources/deployment.html#how-to-set-it-up",
    "title": "Deployment",
    "section": "How to set it up",
    "text": "How to set it up\nUpdating to later versions is essentially the same process as installing. Because there are only two files, it’s just a matter of deleting the old ones and replacing them with new.\n\n1. DropBox\n\nWhen I create an update, I put the LIMS.exe and config.json file into a single zipped folder. Then I upload this folder to my personal DropBox so I can give people download links.\n\nThis isn’t the most streamlined or professional system. I do it this way because I like the clarity about what you’re actually putting on your computer.\n\n\n\n\n2. Download Zipped Folder\n\nI will send an email containing a download link to all people who need the update. Click the link, and it will open a page like this:\n\n\n\n\nDropBox Download Page\n\n\n\nDo not open the folder; this is harmless, but it won’t accomplish anything, and will just confuse the issue.\nRather, click on the download arrow button circled in the image above. THIS will properly download the zipped file onto your computer, into the Downloads folder.\nIt may pop up a dialog box asking you to log in or create an account. This is an irritating misdirect; you do not have to make an account. There should be a link at the bottom of the dialog to skip or continue on to download.\n\nNormally downloading executables from a link is a terrible idea, so only do this when it comes directly from me and has some explanation.\n\n\n\n\n3. Prepare Local Folder\n\nOpen the folder where you have the older version, and delete the contents so that it’s empty. If you haven’t installed LIMS before, create a new folder somewhere you can remember (this can just be on the Desktop) and name it “LIMS” or something similar.\n\nYou can create a shortcut to the application for daily use, but I deliberately kept the files simple so that you could manage moving and deleting them yourself\n\n\n\n\n4. Find Zipped Files in Downloads\n\nOpen the Downloads folder. You can find it by opening a File Explorer window (the folder icon in the bottom tray); the Downloads folder should be near the top of the folders in the lefthand panel.\n\n\n\n\nFind the Downloads folder in the lefthand navigation pannel of File Explorer\n\n\n\nThe zipped folder you just downloaded should be at the top of the files inside the Downloads folder, named something like TerraMax_LIMS_6.0. Open the zipped folder and find the two files inside.\n\nYou cannot run the LIMS.exe file from here inside this zipped folder, because it’s currently compressed\n\n\n\n\n5. Extract Zipped Contents to Local Folder\n\nExtract/unzip the files by simply copying them both, and then pasting them into the empty “LIMS” folder from step 3\n\nThere might be some small lag for the files to fully transfer, but it should work right away. As soon as your computer seems doen with the task, try to open the LIMS file. If it doesn’t work, ask for help."
  },
  {
    "objectID": "pages/user-resources/deployment.html#how-it-works",
    "href": "pages/user-resources/deployment.html#how-it-works",
    "title": "Deployment",
    "section": "How it works",
    "text": "How it works\nLIMS.exe and config.json need to be kept together in the same folder in order to work together.\nWhen the LIMS application starts up, the first thing it does is look for the config file. LIMS does almost all the work, but config.json contains a few instructions about settings and about how to connect to the database. Without a config file, LIMS will default to running in Test Mode, using internal test data instead of connecting to the real database.\nWhen you change settings from within LIMS, it saves those changes by writing them to the config file. It can’t change its own code once it’s compiled into a single-file .exe, so the external config file is necessary to make settings changeable.\nBeyond these two files, nothing else is added or changed; LIMS doesn’t install hidden components. If you delete the two files, there will be no other trace left on your computer.\nTo uninstall, you only need to manually delete these two files."
  },
  {
    "objectID": "pages/database/database-index.html",
    "href": "pages/database/database-index.html",
    "title": "Database",
    "section": "",
    "text": "Database stuff…\nintegrated security?\nsimple vs full structure diagram\nbatches vs types vs recipes vs ingredients vs cfus vs other tables\nnaming conventions! /\nstage names, full vs one-word vs abbreviation how words are combined\nOne page per table @_@ maybe can combine samey tables like batches into one page? but weirdy tables like version stuff and cfu_types need their own\nShould have a how-to section: add new user view activity log add microbe add product type add new recipe version delete a batch query… things?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "LIMS Project Docs",
    "section": "",
    "text": "The LIMS (Laboratory Inventory Management System) is a user-facing application that runs on users’ individual computers and connects to a central database so they can view, edit, and add new data about TerraMax production. It mirrors an older system of paper forms to record the same data in a way that makes it easier to look up\nIt consists of two components:\n\nThe user-facing application, using C# and xaml in the WPF framework and .NET platform.\nThe backend database, stored in a SQL Server Express 2019 database on a local server machine.\n\n\nThis documentation is organized into three sections:\nUser Resources is for non-technical users who want a reference for how to set up, use, or troubleshoot the application.\nDatabase is for anyone who wants to dig a bit deeper into the backend, whether to actively work on maintenance or updates, or just to understand the structure. Some parts will require knowledge of relational databases or SQL, but some parts are meant to be accessible to curious or ambitious non-technical users.\nApplication is for those who want to interact directly with the code of the front-end app to make repairs or updates. This will all be fairly technical and require programming knowledge.\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "pages/application/application-index.html",
    "href": "pages/application/application-index.html",
    "title": "Application",
    "section": "",
    "text": "Applciation stuff"
  },
  {
    "objectID": "pages/user-resources/adding-editing-data.html",
    "href": "pages/user-resources/adding-editing-data.html",
    "title": "Adding and Editing Data",
    "section": "",
    "text": "parent/child (one-to-many) relationships vs recipe ingredients (many-to-many)\nwhen you enter a new batch in at any stage (except mother) the app will supply a dropdown list of exisitng parents/ingredients in the previous stage for it to be made out of when you finalize the a batch at any stage (except product) you make it available to the dropdown in the next stage\nbatches get REMOVED from the dropdowns (depending on stage) when they run out (qty reaches 0) are marked as inactive this is to prevent the dropdowns from becoming bloated with outdated batches, but might sometimes might make things taht SHOULD be there not show up\nif you can’t find a parent/ingredient: was it entered? was it passed? was it marked as inactive? is its qty at 0?\nZero batches for when the actual knowledge chain is broken: don’t have record of a parent or ingredient, but still want to track what you can. Use VERY sparingly, were mostly just there for the early days when transitioning from previous tracking system exception: added as defaults in final product, when you enter an unfinished product as instructions, idea is for those to get replaced with real batches in order to be compelteed\nlater stages depend on previous stages you can’t delete an earlier stage that a later stage is using b/c it would break the chain editing also gets locked down to a minimum"
  },
  {
    "objectID": "pages/user-resources/general-use.html",
    "href": "pages/user-resources/general-use.html",
    "title": "General Use Patterns",
    "section": "",
    "text": "Each tab has particular functions, but some things are general:\nHow data connection works: on startup, it fetches the data once and then stores a local copy in temporary memory; unless you specifically update it, it will keep using this local copy that is not updated. this makes it run faster than constant refreshing, but you have to be intentional about refreshing yourself Refresh witht he circle arrow icon in the top right; it takes a minute. Also doesn’t refresh EVERYTHING, just the stuff that changes often. New microbes or recipes might not update; you need to close and restart the app for that Will do some limited updating after you save, in order to reflect your save and validate you. Don’t assume this is a full refresh\ntab patterns: data table of past stuff on the right, form on the left can sort table by any of the columns can double click to select an item and view it in the form on the left can clear out the selected item from the form by clicking “add new” checkbox\nthe left has a form for entering new items or viewing/editing details of existing ones. \nyou can also sort the righthand table by selecting microbe/product:\n    that both filters the table\n    and sets some defaults for the form to enter a new one of those\n    filters down ingredients and recipe stuff to what's relevant for that item\nclear out the item-specific filtering by clicking \"clear\" button at bottom"
  },
  {
    "objectID": "pages/user-resources/tech-overview.html",
    "href": "pages/user-resources/tech-overview.html",
    "title": "Tech Overview",
    "section": "",
    "text": "The LIMS project is essentially a user application and a central database of data.\n\n\n\nDiagram of General Structure\n\n\nThough it is possible to interact with the database data directly using SQL queries, most users will only work through the application, which streamlines common tasks and provides a graphic interface. The application is installed on each user’s computer.\nThe database is stored on a local server machine onsite. All copies of the application view and edit the same data so users can collaborate in documeting production, each tracking their individual parts in the interconnected process."
  },
  {
    "objectID": "pages/user-resources/tech-overview.html#summary",
    "href": "pages/user-resources/tech-overview.html#summary",
    "title": "Tech Overview",
    "section": "",
    "text": "The LIMS project is essentially a user application and a central database of data.\n\n\n\nDiagram of General Structure\n\n\nThough it is possible to interact with the database data directly using SQL queries, most users will only work through the application, which streamlines common tasks and provides a graphic interface. The application is installed on each user’s computer.\nThe database is stored on a local server machine onsite. All copies of the application view and edit the same data so users can collaborate in documeting production, each tracking their individual parts in the interconnected process."
  },
  {
    "objectID": "pages/user-resources/tech-overview.html#application",
    "href": "pages/user-resources/tech-overview.html#application",
    "title": "Tech Overview",
    "section": "Application",
    "text": "Application\nThe application is installed on each user’s computer. It consists of two files: LIMS.exe and config.json. These two files need to be stored together in the same folder in order to work; LIMS.exe looks for config.json when it starts up and expects to find it in its same folder.\nThere are only these two files. Many applications will install a variety of configuration and support files in system folders, but for this project I wanted users to be able to keep track of what was on their computer, and be able to delete everything cleanly without worrying about leftover pieces.\nIf you delete these two files, then you have fully removed the program from your computer with no further cleanup necessary\n\nconfig.json\nA simple text file (.json tells the system to use it in certain ways, but you can view it like a .txt) containing settings that can be changed. The application references this file on startup to tell it what settings to use. These settings include some that you can change from within the app:\n\nUseTestMode - true or false, determines whether it connects to the real database or uses a small set of internal “test data”\nIsReadOnly - true or false, determines whether the user can save to the database or just view what’s already there\nDataTimeSpan - a number representing days, determines the date range of past data that the application fetches. It defaults to 365 (1 year) to save space and make the app run faster, but it’s possible to change to a longer range if you need to view older data.\n\nThe file also contains the connectionString, which you cannot change from the app. The connection string tells the app how to find the database, and should usually be left alone. If there are connection issues, a database admin might want to edit this value.\n\n\nLIMS.exe\nThe entire self-contained app, appart from a few settings. This application uses C# in the WPF framework on the .NET platform.\n\n.NET is\nWPF\nC# is"
  },
  {
    "objectID": "pages/user-resources/tech-overview.html#sql-server",
    "href": "pages/user-resources/tech-overview.html#sql-server",
    "title": "Tech Overview",
    "section": "SQL Server",
    "text": "SQL Server\n\nDatabase\n\n\nUser Access\nThe system uses Integrated Security, also called Windows Authentication, to determine if and what a user should be able to access in the SQL Server. The user has a Windows login that they use to log on to the computer itself, and this same login identity is recognized in the Server, where it’s assigned permissions and roles."
  },
  {
    "objectID": "pages/user-resources/tech-overview.html#this-means-that-the-user-doesnt-have-to-go-through-an-extra-login-to-use-the-database.-if-they-have-been-assigned-permission-in-the-server-then-their-original-windows-login-gives-them-access.",
    "href": "pages/user-resources/tech-overview.html#this-means-that-the-user-doesnt-have-to-go-through-an-extra-login-to-use-the-database.-if-they-have-been-assigned-permission-in-the-server-then-their-original-windows-login-gives-them-access.",
    "title": "Tech Overview",
    "section": "This means that the user doesn’t have to go through an extra login to use the database. If they have been assigned permission in the Server, then their original Windows login gives them access.",
    "text": "This means that the user doesn’t have to go through an extra login to use the database. If they have been assigned permission in the Server, then their original Windows login gives them access.\nTwo parts, how they interact, where they live\nApp brief summary/list of things: .NET, C#, WPF, EFCore\nDatabase SQL Server"
  },
  {
    "objectID": "pages/user-resources/versions-and-settings.html",
    "href": "pages/user-resources/versions-and-settings.html",
    "title": "Versions and Settings",
    "section": "",
    "text": "This document explains how to view LIMS versions and know if you need to update, and how to change application settings. Both Versions and Settings are found by clicking on the little gear icon in the top right corner of the program."
  },
  {
    "objectID": "pages/user-resources/versions-and-settings.html#versions",
    "href": "pages/user-resources/versions-and-settings.html#versions",
    "title": "Versions and Settings",
    "section": "Versions",
    "text": "Versions\nWhenever I release a LIMS update, the new version will have a new version number. Your local copy should tell you what your version number is in the top bar:\n\n\n\nVersion settigns in the title bar\n\n\nthe little gear icon\nversions title bar tells you what you have versions tells you what the most current is can also look at version history to see what’s changed & why you needa given update theoretically, the first number means a breaking change, the second is about necessary updates for errors, the third is small stuff\nsettings work by editing the config file, that’s why it matters date range read only test mode"
  }
]