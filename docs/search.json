[
  {
    "objectID": "pages/user-resources/vocabulary.html",
    "href": "pages/user-resources/vocabulary.html",
    "title": "Vocabulary and Naming Convetions",
    "section": "",
    "text": "Stage\nParent/Child\nIngredient\nRecipe\nInput"
  },
  {
    "objectID": "pages/user-resources/user-index.html",
    "href": "pages/user-resources/user-index.html",
    "title": "User Resources",
    "section": "",
    "text": "Tech Overview\nDeployment\nSettings and Versions\nGeneral Use Patterns\nTabs and Stages\nAdding and Editing Data\nVocabulary and Naming Conventions"
  },
  {
    "objectID": "pages/user-resources/user-index.html#quick-links",
    "href": "pages/user-resources/user-index.html#quick-links",
    "title": "User Resources",
    "section": "",
    "text": "Tech Overview\nDeployment\nSettings and Versions\nGeneral Use Patterns\nTabs and Stages\nAdding and Editing Data\nVocabulary and Naming Conventions"
  },
  {
    "objectID": "pages/user-resources/user-index.html#summary",
    "href": "pages/user-resources/user-index.html#summary",
    "title": "User Resources",
    "section": "Summary",
    "text": "Summary\nThis section is a colletion of reference documents for non-technical users to help them understand and use LIMS.\nTech Overview summarizes how the technical components are structured and work together.\nDeployment explains the process of downloading and installing the application onto a user’s computer.\nSettings and Versions discusses how to check that your version is the most up to date, and to change settings that affect Read Only mode, Test Mode, and the daterange of data you want the application to fetch from the database.\nGeneral Use Patterns explains when and how the app updates the data it displays, how to refresh it yourself, and walks through the things all tabs have in common like filtering by microbe, clearing the form, and sorting the data grid.\nTabs and Stages describes the flow from mother stock to final product, the stages in this flow, and the logic behind why they’re split the way they are.\nAdding and Editing Data continues some of the topics from Tabs and Stages to go into more detail about how adding or editing data in one tab affects the next, and how the relationships from one stage to the next affects what the app allows you to do.\nVocabulary and Naming Conventions"
  },
  {
    "objectID": "pages/user-resources/tabs-and-stages.html",
    "href": "pages/user-resources/tabs-and-stages.html",
    "title": "Tabs and Stages",
    "section": "",
    "text": "One tab for each “stage”, stages are based off careful discussion with lab about their process; an attempt to model the real process as best as possible with the data structure\noverall process flow\nstages are points in the production cycle have a batch number have either one microbial parent, or one or more microbial ingredients from the previous stage (except mother) are used as a parent or ingredient in the next stage (expect product)\nall of these were pretty intuitive off the exisiting paperwork, except the drydown process splitting into stabilized and powder here the stages were decided because of the structure of the flow: a ferment might be split into many SL, and one SL might be split into many DMP DMP includes the liquid phase right before actual dry down, when some ingredients are added last minute there’s arguably also a DDL stage, except one DDL doesn’t ever split into multiple DPM SL and DMP could be argued as one big stage, except SL DOES sometimes (albeit rarely) get split into multiple DDL & DMP the exact lines of whether an input is added during the SL stage or the liquid half of the DMP stage not your problem, now handled by the auto-generated recipe\nparent/child (one-to-many) relationships vs recipe ingredients (many-to-many)\nlist the stages all out? Diagram? Def Diagram of parent/child vs recipe ingredients"
  },
  {
    "objectID": "pages/user-resources/deployment.html",
    "href": "pages/user-resources/deployment.html",
    "title": "Deployment",
    "section": "",
    "text": "This document explains step-by-step how to get the LIMS application set up on your computer, and then gives a brief summary of what files have been installed on your computer, how they interact, and how to delete them safely."
  },
  {
    "objectID": "pages/user-resources/deployment.html#how-to-set-it-up",
    "href": "pages/user-resources/deployment.html#how-to-set-it-up",
    "title": "Deployment",
    "section": "How to set it up",
    "text": "How to set it up\nUpdating to later versions is essentially the same process as installing. Because there are only two files, it’s just a matter of deleting the old ones and replacing them with new.\n\n1. DropBox\n\nWhen I create an update, I put the LIMS.exe and config.json file into a single zipped folder. Then I upload this folder to my personal DropBox so I can give people download links.\n\nThis isn’t the most streamlined or professional system. I do it this way because I like the clarity about what you’re actually putting on your computer.\n\n\n\n\n2. Download Zipped Folder\n\nI will send an email containing a download link to all people who need the update. Click the link, and it will open a page like this:\n\n\n\n\nDropBox Download Page\n\n\n\nDo not open the folder; this is harmless, but it won’t accomplish anything, and will just confuse the issue.\nRather, click on the download arrow button circled in the image above. THIS will properly download the zipped file onto your computer, into the Downloads folder.\nIt may pop up a dialog box asking you to log in or create an account. This is an irritating misdirect; you do not have to make an account. There should be a link at the bottom of the dialog to skip or continue on to download.\n\nNormally downloading executables from a link is a terrible idea, so only do this when it comes directly from me and has some explanation.\n\n\n\n\n3. Prepare Local Folder\n\nOpen the folder where you have the older version, and delete the contents so that it’s empty. If you haven’t installed LIMS before, create a new folder somewhere you can remember (this can just be on the Desktop) and name it “LIMS” or something similar.\n\nYou can create a shortcut to the application for daily use, but I deliberately kept the files simple so that you could manage moving and deleting them yourself\n\n\n\n\n4. Find Zipped Files in Downloads\n\nOpen the Downloads folder. You can find it by opening a File Explorer window (the folder icon in the bottom tray); the Downloads folder should be near the top of the folders in the lefthand panel.\n\n\n\n\nFind the Downloads folder in the lefthand navigation pannel of File Explorer\n\n\n\nThe zipped folder you just downloaded should be at the top of the files inside the Downloads folder, named something like TerraMax_LIMS_6.0. Open the zipped folder and find the two files inside.\n\nYou cannot run the LIMS.exe file from here inside this zipped folder, because it’s currently compressed\n\n\n\n\n5. Extract Zipped Contents to Local Folder\n\nExtract/unzip the files by simply copying them both, and then pasting them into the empty “LIMS” folder from step 3\n\nThere might be some small lag for the files to fully transfer, but it should work right away. As soon as your computer seems done with the task, try to open the LIMS file. If it doesn’t work, ask for help."
  },
  {
    "objectID": "pages/user-resources/deployment.html#how-it-works",
    "href": "pages/user-resources/deployment.html#how-it-works",
    "title": "Deployment",
    "section": "How it works",
    "text": "How it works\nLIMS.exe and config.json need to be kept together in the same folder in order to work together.\nWhen the LIMS application starts up, the first thing it does is look for the config file. LIMS does almost all the work, but config.json contains a few instructions about settings and about how to connect to the database. Without a config file, LIMS will default to running in Test Mode, using internal test data instead of connecting to the real database.\nWhen you change settings from within LIMS, it saves those changes by writing them to the config file. It can’t change its own code once it’s compiled into a single-file .exe, so the external config file is necessary to make settings changeable.\nBeyond these two files, nothing else is added or changed; LIMS doesn’t install hidden components. If you delete the two files, there will be no other trace left on your computer.\nTo uninstall, you only need to manually delete these two files."
  },
  {
    "objectID": "pages/database/database-index.html",
    "href": "pages/database/database-index.html",
    "title": "Database",
    "section": "",
    "text": "Database stuff…\nintegrated security?\nsimple vs full structure diagram\nbatches vs types vs recipes vs ingredients vs cfus vs other tables\nnaming conventions! /\nstage names, full vs one-word vs abbreviation how words are combined\nOne page per table O_o maybe can combine samey tables like batches into one page? but weirdy tables like version stuff and cfu_types need their own\nShould have a how-to section: add new user view activity log add microbe add product type add new recipe version delete a batch query… things?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "LIMS Project Docs",
    "section": "",
    "text": "The LIMS (Laboratory Inventory Management System) is a user-facing application that runs on users’ individual computers and connects to a central database so they can view, edit, and add new data about TerraMax production. It mirrors an older system of paper forms to record the same data in a way that makes it easier to look up\nIt consists of two components:\n\nThe user-facing application, using C# and xaml in the WPF framework and .NET platform.\nThe backend database, stored in a SQL Server Express 2019 database on a local server machine.\n\n\nThis documentation is organized into three sections:\nUser Resources is for non-technical users who want a reference for how to set up, use, or troubleshoot the application.\nDatabase is for anyone who wants to dig a bit deeper into the backend, whether to actively work on maintenance or updates, or just to understand the structure. Some parts will require knowledge of relational databases or SQL, but some parts are meant to be accessible to curious or ambitious non-technical users.\nApplication is for those who want to interact directly with the code of the front-end app to make repairs or updates. This will all be fairly technical and require programming knowledge.\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "pages/application/application-index.html",
    "href": "pages/application/application-index.html",
    "title": "Application",
    "section": "",
    "text": "Applciation stuff"
  },
  {
    "objectID": "pages/user-resources/adding-editing-data.html",
    "href": "pages/user-resources/adding-editing-data.html",
    "title": "Adding and Editing Data",
    "section": "",
    "text": "parent/child (one-to-many) relationships vs recipe ingredients (many-to-many)\nwhen you enter a new batch in at any stage (except mother) the app will supply a dropdown list of exisitng parents/ingredients in the previous stage for it to be made out of when you finalize the a batch at any stage (except product) you make it available to the dropdown in the next stage\nbatches get REMOVED from the dropdowns (depending on stage) when they run out (qty reaches 0) are marked as inactive this is to prevent the dropdowns from becoming bloated with outdated batches, but might sometimes might make things taht SHOULD be there not show up\nif you can’t find a parent/ingredient: was it entered? was it passed? was it marked as inactive? is its qty at 0?\nZero batches for when the actual knowledge chain is broken: don’t have record of a parent or ingredient, but still want to track what you can. Use VERY sparingly, were mostly just there for the early days when transitioning from previous tracking system exception: added as defaults in final product, when you enter an unfinished product as instructions, idea is for those to get replaced with real batches in order to be compelteed\nlater stages depend on previous stages you can’t delete an earlier stage that a later stage is using b/c it would break the chain editing also gets locked down to a minimum"
  },
  {
    "objectID": "pages/user-resources/general-use.html",
    "href": "pages/user-resources/general-use.html",
    "title": "General Use Patterns",
    "section": "",
    "text": "This document explains some general patterns and behavior in the LIMS app that are relevant to most users, regardless of which tab you use. I’m diving this into three sections:"
  },
  {
    "objectID": "pages/user-resources/general-use.html#data-connection",
    "href": "pages/user-resources/general-use.html#data-connection",
    "title": "General Use Patterns",
    "section": "Data Connection",
    "text": "Data Connection\n\nReading Data FROM the Database\nIf the application is set up correctly and is not in Test Mode, then when it launches it will spend a few seconds fetching data from the database. It does not store data locally between sessions, so it has to fetch everything from scratch in this first load. This is part of why startup is a bit slow.\nOnce it loads, it holds the data it fetched in the application’s temporary memory. This data takes up space on your computer while the app is running, but will be erased completely when the app closes and can’t hold on to it anymore.\nStoring the data locally on your computer means that the applciation doesn’t have to spend time fetching it from the database over and over again, so you can filter and sort and view data across all tabs fairly quickly. It does come with two drawbacks, however: - It makes the application take up a lot of space while it’s running. To soften the impact, keep the date range settings limited to only what you actually need, so the app isn’t wasting space on old irrelevant data. See Settings and Versions for how to change the date range - It means that the data doesn’t update automatically when someone else makes changes to the central database. Your app is basically using a copy that it made when it started up, and it will gradually get more and more out-of-date the longer it runs without a refresh. To correct for this, you can manually refresh it at any time by clicking the little yellow cricle arrow in the top righthand corner. This refresh will make the app pause for a moment as it fetches the data, like it did during the initial load. It refreshes most data but not quite all; some things that only rarely change, like microbes and recipes, are left out in order to make the refresh a little faster. If you think a refresh didn’t update everything that you expected, try closing and reopening the program to ensure that everything is up-to-date.\n\n\nMaking Edits TO the Database\nit is strongly recommended that you do a refresh before making changes if you’ve left LIMS open and idle for more than a few mintues. You want to make sure that you’re editing the actual, current database and not an outdated idea of it. It’s unlikely that your change would ever be in conflict with a change someone else made after your last refresh, but it’s not impossible. The SQL database has a fair ability to protect itself from changes that would break its logic, but you might get an error or accidentally duplicate someone else’s work.\nWhen you click Save or Delete, then the application will connect with the database to apply those changes there. It will always pop up a window and ask you if you’re sure before it changes the database. If you click OK, it makes your change and then also performs a limited fetch of just the data that is affected by your change, so that you can see your change applied and know that it was successful. This transaction will also cause the program to pause for a moment.\nThese limited updates that happen when you make it seem like the app has updated it’s data, but be aware that it was not a full refresh. If someone else made a change in a different section of the database not immediately related to your change, then that won’t show up until you do a full manualy refresh by clicking the yellow circle arrow."
  },
  {
    "objectID": "pages/user-resources/general-use.html#components",
    "href": "pages/user-resources/general-use.html#components",
    "title": "General Use Patterns",
    "section": "Components",
    "text": "Components\nThe application is organized into tabs that each manage a different Stage of production. Read more about Tabs and Stages here. The exception to this is the Search tab at the beginning of the row; this was meant to be a much more robust feature for complex querying of the data, but remains unfinished.\nWhen you click from one tab to the next, anything you entered into the previous tab is cleared.\n\nData Grid\nEvery tab’s basic layout includes a data grid on the left side of the layout.\nBy default they will display in reverse chronological order (newest at the top) but you can change the sort order by clicking on the column headers. When you first click on a header, is will sort on that column’s values in ascending order. Click on that same header again and it will sort on the same column in reversed order. Every tab has different columns depending on what’s most relveant to that stage, but all columns can be sorted on.\nAll tabs but the Search tab display the batches for that particular stage, with columns for important relevant data like batch number, start date, parent batch, and cfus. To view a more complete set of data about the batch, you can double-click it and the form on the righthand side will populate with the batch details.\n\n\nEntry Form\nAll tabs but Search have a form on the right side of the display. You can use this form both to enter a new batch, or to view or edit data about an existing batch.\nThe specific data fields will be particular to the tab stage, but there are a few things they all share:\n\nMicrobe or Type Dropdown\nMother Stock through Ferment all use only one microbe at a time, whereas Stabilized through Final Product have more complex recipes. But for all tabs, selecting an item from this dropdown will filter tge righthand data grid to show only batches of that type, and set up the rest of the form for the potential input of a new batch of that type.\n\n\nStart Date\nAll stages have Start Date as a data field, and you can either enter it here by typing or select the date you want int he pop-out calendar. If you enter a date before entering a batch number, then the batch number with auto-populate with a 6-digit code based off that date in the order of YYMMDD. If there is already a batch number entered, then selecting a date will not affect it; the batch and date match by default, but you are allowed to overrride the default.\n\n\nBatch Number\nAll stages also have a Batch Number field. If you manually type in a 6-digit number here before selecting a date, and the number works as a YYMMDD date, then itwill auto-populate the date to match the number you type. If there is already a date selected, then you can change the batch number without affecting it. Again, the batch and date match by default, but you are allowed to overrride the default.\n\n\nInitials\nHere you can manually type your initials, to mark who did the work of entering this data. This is a simple text field that does not limit you to a “correct” list of initials; the preferred format is 3 letters, but that’s not enforced.\n\n\nNotes\nAll stages have a Notes field. Inevitably there are edge cases and exceptions that don’t quite fit into the default data fields, so notes allows you to record any other important information that doesn’t fit the normal schema.\n\n\nAdd New\nIn the top right of the lefthand form is a small checkbox that says Add New. This is marked by default when you first open a tab, and indicates that anything you enter into the form below will be part of a new bathc if you click Save.\nIt will unmark itself automatically if you double-click something from the righthand data grid, because then you are viewing an existing batch. If you change or add anything to the form when Add New is unchecked and click Save, then your changes will be saved to the selected existing batch.\nYou can manually select this checkbox when you are viewing an existing batch in order to deselect it and return to a cleared form.\n\n\nDelete and Clear\nAll stages have a button at the bottom of the page which appears as Delete when you have selected a specific batch, and Clear when you have not.\nFor Delete, it will be grayed out if you are in Read Only mode, or if the batch you’ve selected can’t be deleted. The system prevents you from deleting batches that have certain complex data connections, to avoid damaging the data structure. The exact rules vary between stages, but in general new and incomplete entries can be deleted, but the older they are the more likely they are to be locked in the deeper data web.\nIf you’re entering a new batch, then the Delete button will be a Clear button instead, and simply clear the data you’ve entered into the form.\n\n\nSave\nSome stages have more complex entry forms than others, but all of them use the green Save button in the same way. The Save button is always active if you’re not in Read Only mode. If you haven’t completed all necessary parts of the form, then when you click Save a popup will tell you so.\nYou can either enter the information for a new batch, or select an existing batch fromt he fighthand data grid and make edits or additon. When you’ve entered your information, you must click the Save button to actually push that information to the database.\n\n\n\nRecipe Box\nBecause of the data structure of the stages, the Stabilized Liquid thought Final Product tabs use the Recipe Box in theior entry forms.\nThe recipe box will be blank when you first enter the tab or if you clear the form, but if you select a type from the dropdown it will populate itself according to the appropriate recipe. For DMP this may be empty, depending on what you select.\nThe qty values for the infredients will auto-populate with the correct volumes for the given total qty of the batch. While the batch is still new, you can edit the total qty to re-caclulate the ingredient amounts as well. You are allowed to override these values. Once you save your new batch to the database, if you select and view it again, then the form will stop automatically updating the qtys. This is to avoid accidentally editing an overriden value.\nThere will be one box for each ingredient in the recipe, with an entry field line. Within each ingredient box you can also click the green plus button to add another line for that ingredient, if you used multiple batches. You can delete extra lines by clicking onthe red minus button ,but only when you have more than one. You can’t delete the last single line, because each ingredient must have at least one item.\nFor some stages, you will see batches with a number 000000. These 0-batches are meant to be used as a last resort if you don’t have the correct data to fill in that part of the form. Using them creates a sort of cauterized break in the data chain, so only use them if you have no other choice.\nIf it’s a microbial ingredient, then you will be given a dropdown of exisiting potential batches. The app’s logic tries to keep these dropdowns up-to-date by only showing batches with a qty of more than 0. If you think something should be showing up in a dropdown and it’s missing, check the batch in its own tab. It’s qty may be the issue, and you can manually adjust it there to make it appear in the dropdown elsewhere.\nIf it’s a non-microbial incredient then you can manually type the batch number yourself into a text field. You have to type something for this field, but the application has no error-checking mechanism. You can type “N/A” here if there is no batch number."
  },
  {
    "objectID": "pages/user-resources/general-use.html#state-behavior",
    "href": "pages/user-resources/general-use.html#state-behavior",
    "title": "General Use Patterns",
    "section": "State Behavior",
    "text": "State Behavior\nFor all stages tabs, there are three main states that the tab can be in.\n\nClear\nMicrobe/Type Selected\nExisting Batch Selected\n\nThese states affect how various elements in the tab appear and behave, and will each be addressed indivudually.\n\nClear State\n\nHow to Tell\nIn this state, no microbe or type has been selected, and so the data grid on the right side of the display will show *all** batches, not be filtered to a specufruc type. The Add New checkbox will be checked and graye dout so you can’t change it.\n\n\nHow to Get There\nWhen you first open a tab, it’s state is clear by default. If you’re in a Microbe/Type Selected state, you can lcik the red Clear button at the bottom of the display. If you’re in a Existing Batch Selected state, you can click the Add New checkbox at the top of the form.\n\n\nEffect on the Data Grid\nIn a Clear state you should see all batches listed in the righthand grid with no filtering.\n\n\nEffect on the Form\nIn a Clear state the form has not adjusted to accomodate a particular microbe or type of batch. You can enter some data, things like Dtart Date or Initials or Notes that are not specific to a batch type, but parent batch dropdopwns and recipe boxes will be empty.\n\n\nEffect on the Delete/Clear Button\nIn a Clear state you should have a red Clear button at the bottom of the form.\n\n\nEffect on the Save Button\nIn a Clear state you can click the Save button (unless you’re in Read Only mode) but it will trigger a dialog box telling you that you haven’t filled in all necessary fields.\n\n\n\nMicrobe/Type Selected\n\nHow to Tell\nIn this state the righthand datagrid will be filtered to show only batches for the selected microbe or type in the dropdown at the top of the form, but the Add New checkbox will still be checked and disabled.\n\n\nHow to Get There\nFrom a Clear state you can select a microbe or type from the dropdown at the top of the form to switch to a Microbe/Type Selected state oriented around the selected item.\nIf you’re in a, Existing Batch Selected state you need to first click Add New to revert to a Clear state, and then select something fromt he dropdown.\n\n\nEffect on the Data Grid\nIn a Microbe/Type Selected state the data grid is fitlered to show only batches for the selected type.\n\n\nEffect on the Form\nIn a Microbe/Type Selected state the form may still be mostly empty, but has been readjusted to fit the selected type. If the stage has a recipe, then the recipe box will display it, and any parent or microbial ingredients dropdowns will be populated with appropriate options. Default qtys will be applied, and if ther is a reciple then those qtys will be auto-calculated whenever you change the total qty, though you can override them.\n\n\nEffect on the Delete/Clear Button\nIn a Microbe/Type Selected state you should still have a red Clear button at the bottom of the form. Clicking it will clear the form and return you to a Clear state.\n\n\nEffect on the Save Button\nIn a Microbe/Type Selected state you can click the Save button (unless you’re in Read Only mode) and if you have all the required fields filled it will save your entry as a new batch.\n\n\n\nExisting Batch Selected\n\nHow to Tell\nIn this state the righthand datagrid will be filtered to show only batches for the selected microbe or type in the dropdown at the top of the form, and the Add New checkbox will by unchecked and active. The form will be populated with the existing data, and some fields like the batch number will be grayed out so you can’t change them.\n\n\nHow to Get There\nFrom any state, you can double-click on an item in the righthand data grid to select it and set the tab state around it.\n\n\nEffect on the Data Grid\nIn a Existing Batch Selected state the data grid is filtered to show only batches for the selected type. Some tabs add additional filtering to show only other batches with the same parent.\n\n\nEffect on the Form\nIn a Existing Batch Selected state the form will be readjusted to fit the selected batch’s type, and then populated with exisiting data from the database. Some fields will be grayed out so you can’t change them. Qtys will no longer auto-calculate, to avoid accidentally resetting an intentionally overridden value.\n\n\nEffect on the Delete/Clear Button\nIn a Existing Batch Selected state you should now have a Delete button at the bottom of the form inseatd of Clear. It may be grayed out and inactive if the batch cannot be deleted due to relationships with other data in the database. If it’s red then it’s active and clicking it will delete the selected batch from the database.\n\n\nEffect on the Save Button\nIn a Existing Batch Selected state you can click the Save button (unless you’re in Read Only mode) and whatever changes you’ve made will replace the previous data about the selected batch in the database."
  },
  {
    "objectID": "pages/user-resources/general-use.html#summary-table-of-components-and-states",
    "href": "pages/user-resources/general-use.html#summary-table-of-components-and-states",
    "title": "General Use Patterns",
    "section": "Summary Table of Components and States",
    "text": "Summary Table of Components and States\n\n\n\n\n\n\n\n\n\nComponent\nClear State\nMicrobe/Type Selected State\nExisting Batch Selected State\n\n\n\n\nData Grid\nall/unfiltered\nfiltered by microbe/type\nfiltered by type or parent batch\n\n\nEntry Form\nempty, generic\nempty, strucutred for type\npopulated with existing data, structured for type\n\n\nAdd New Checkbox\nchecked, disabled\nchecked, disabled\nunchecked, enabled, clicking stes state to Clear\n\n\nMicrobe/Type Dropdown\nblank, enabled\nselected, enabled\nselected, disabled\n\n\nBatch Number\nblank, enabled\nblank, enabled\nfilled, disabled\n\n\nParent Batch\nblank, no options\nblank, options available\nselected, diabled\n\n\nRecipe Box\nblank, no options\nblank, recipe options available\nblank or filled, recipe options available\n\n\nSave Button\nactive, dialog tells you not enough data\nactive, saves new if all required fields filled\nactive, saves over existing batch\n\n\nClear/Delete Button\nClear, clears form\nClear, clears form, returns state to Clear\nDelete, may be disabled, deletes selected batch"
  },
  {
    "objectID": "pages/user-resources/tech-overview.html",
    "href": "pages/user-resources/tech-overview.html",
    "title": "Tech Overview",
    "section": "",
    "text": "The LIMS project is essentially a user application and a central database of data.\n\n\n\nDiagram of General Structure\n\n\nThough it is possible to interact with the database data directly using SQL queries, most users will only work through the application, which streamlines common tasks and provides a graphic interface. The application is installed on each user’s computer.\nThe database is stored on a local server machine onsite. All copies of the application view and edit the same data so users can collaborate in documeting production, each tracking their individual parts in the interconnected process."
  },
  {
    "objectID": "pages/user-resources/tech-overview.html#summary",
    "href": "pages/user-resources/tech-overview.html#summary",
    "title": "Tech Overview",
    "section": "",
    "text": "The LIMS project is essentially a user application and a central database of data.\n\n\n\nDiagram of General Structure\n\n\nThough it is possible to interact with the database data directly using SQL queries, most users will only work through the application, which streamlines common tasks and provides a graphic interface. The application is installed on each user’s computer.\nThe database is stored on a local server machine onsite. All copies of the application view and edit the same data so users can collaborate in documeting production, each tracking their individual parts in the interconnected process."
  },
  {
    "objectID": "pages/user-resources/tech-overview.html#application",
    "href": "pages/user-resources/tech-overview.html#application",
    "title": "Tech Overview",
    "section": "Application",
    "text": "Application\nThe application is installed on each user’s computer. It consists of two files: LIMS.exe and config.json. These two files need to be stored together in the same folder in order to work; LIMS.exe looks for config.json when it starts up and expects to find it in its same folder.\nThere are only these two files. Many applications will install a variety of configuration and support files in system folders, but for this project I wanted users to be able to keep track of what was on their computer, and be able to delete everything cleanly without worrying about leftover pieces.\nIf you delete these two files, then you have fully removed the program from your computer with no further cleanup necessary\n\nconfig.json\nA simple text file (.json tells the system to use it in certain ways, but you can view it like a .txt) containing settings that can be changed. The application references this file on startup to tell it what settings to use. These settings include some that you can change from within the app:\n\nUseTestMode - true or false, determines whether it connects to the real database or uses a small set of internal “test data”\nIsReadOnly - true or false, determines whether the user can save to the database or just view what’s already there\nDataTimeSpan - a number representing days, determines the date range of past data that the application fetches. It defaults to 365 (1 year) to save space and make the app run faster, but it’s possible to change to a longer range if you need to view older data.\n\nThe file also contains the connectionString, which you cannot change from the app. The connection string tells the app how to find the database, and should usually be left alone. If there are connection issues, a database admin might want to edit this value.\n\n\nLIMS.exe\nThe entire self-contained app, appart from a few settings. This application uses C# in the WPF framework on the .NET platform.\n\n.NET is\nWPF\nC# is"
  },
  {
    "objectID": "pages/user-resources/tech-overview.html#sql-server",
    "href": "pages/user-resources/tech-overview.html#sql-server",
    "title": "Tech Overview",
    "section": "SQL Server",
    "text": "SQL Server\n\nDatabase\n\n\nUser Access\nThe system uses Integrated Security, also called Windows Authentication, to determine if and what a user should be able to access in the SQL Server. The user has a Windows login that they use to log on to the computer itself, and this same login identity is recognized in the Server, where it’s assigned permissions and roles.\nThis means that the user doesn’t have to go through an extra login to use the database. If they have been assigned permission in the Server, then their original Windows login gives them access.\n\nTwo parts, how they interact, where they live\nApp brief summary/list of things: .NET, C#, WPF, EFCore\nDatabase SQL Server"
  },
  {
    "objectID": "pages/user-resources/versions-and-settings.html",
    "href": "pages/user-resources/versions-and-settings.html",
    "title": "Settings and Versions",
    "section": "",
    "text": "This document explains how to view LIMS versions and know if you need to update, and how to change application settings. Both Versions and Settings are found by clicking on the little gear icon in the top right corner of the program.\nYour local LIMS application should tell you a few things right in the title bar:"
  },
  {
    "objectID": "pages/user-resources/versions-and-settings.html#settings",
    "href": "pages/user-resources/versions-and-settings.html#settings",
    "title": "Settings and Versions",
    "section": "Settings",
    "text": "Settings\nIn the window that pops up when you click the gear icon, the first Data Settings tab allows you to change and save a few settings that affect how the LIMS application runs on your computer.\n\nData Connection - Use Test Mode\nThis is an on-or-off setting that determines whether the LIMS application connects to the database or not. The default normal funcitoning is for this to be unchecked. If you check it then it will run in Test Mode and use a small set of internally-generated test data instead of connecting to the database.\nWhy use Test Mode?\nTest Mode offers a way to test the functionality of the application without making any changes to the real database. If you want to experiment with how the software works, this is a safe way to do that. It can also be useful for testing certain kinds of errors; if it seems likely that an issue is due to a connection issue, then using Test Mode is a way to check whether the error happens independent of the connection.\n\n\nRead Only - Is Read Only\nThis is an on-or-off setting that determines whether the LIMS application is in Read Only mode or not. When I send out updates I will usually set this for you in advance according to what your needs are, but it’s also possible to change it yourself. If it’s checked, then LIMS will run in Read Only so that you can view real data from the database but you can’t edit it.\n\n\nTime Span\nThis setting is a number that represents time in days. This will determine the Date Range of data that the application fetches from the database. Items like Mother Stock and Working Stock are all fetched no matter the date range, but for all other Stages LIMS will filter out everything that is older than the given number of days.\nThe default option is 1 year (365 days), and you’re given another selection option for “All Time”, and a third for a “Custom” time.\nThe purpose of this filtering is to improve the applicaiton’s performace. The more data it fetches, the longer it takes to load, and the more data is sitting in memory slowing down your computer. There are some situaitons where you might want to look up data about production from two years ago, but one year is plenty for most daily use.\n\n\nSaving Changes\nAfter you select the changes that you want to make to your settings, you need to click the Save Settings button at the bottom of the window. This will save the changes to the config.json file, so that they will be available the next time the application starts up and checks that file for details about how to run.\nYou will then be asked whether you want to restart in order to apply them now.\n\n\n\nChanges Saved Popup asks if you want to restart\n\n\n\nIf you click No, then LIMS will remain open and operting under the previous set of Settings, until you close it. Your changes will appear the next time you open LIMS.\nIf you click Yes, then LIMS will close, the loading animation will play, and it will re-open with the new Settings in place."
  },
  {
    "objectID": "pages/user-resources/versions-and-settings.html#versions",
    "href": "pages/user-resources/versions-and-settings.html#versions",
    "title": "Settings and Versions",
    "section": "Versions",
    "text": "Versions\nWhenever I release a LIMS update, the new version will have a new version number.\nIn the window that pops up when you click the gear icon, the second Versions tab contains more information about versioning.\n\n\n\nVersioning tab in Settings and Info popup\n\n\nNote: This versioning information comes from the database, and so is only available when connected. It will appear blank if you are in Test Mode.\nAt the top of the tab it tells you what the current latest release number is, so you can compare it with your own and know whether you’re up to date.\nBelow that are two tables; on the left is a list of Current/Past Updates. These default to sort of descending order by version number, with the most recent version on top. The table itself tells you what date a given update was released, what section/s the update affected, and then shows the beginning of a longer explanation of what the update did. If you double-click on a particular line in the table, then the full explanation will appear in the white space below so you can read about it.\nIn the table on the right is a list of Planned Updates, and works the same way as the Current/Past list. In theory it’s a way to track and communicate ideas about future updates, but has gotten a bit stale. All the items left in it are over a year old, and most were specifically requested by an employee who doesn’t work here any more and had somewhat divergent ideas about how LIMS should work. This was used more in the early days of LIMS development.\n\nVersion Numbers\nThe version numbers have three parts, which are meant to communicate the importance of the update.\n\nThe first digit on the left changing means a breaking change, something that fundamentally affects how the application interacts with the database. This usually involves some change to the backend database as well; either it was changed in a way that will cause older versions of LIMS to malfunction, or older versions of LIMS will add or edit data in a way that will undermine the newer data structure. Do not use a version with an outdated first digit unless you are using it in Read Only mode and never intend to make edits.\nThe second number is for big fixes or updates that are fairly serious and strongly recommended, but do not fundamentally change how the application interacts with the database. These are usually corrections of fairly serious errors that made LIMS unusable for certain tasks, or else additions of features that are significant but not essential. If your version is out of date in the second digit, you may encounter errors that have been fixed in later versions, but you shouldn’t be doing harm to anything but your own sanity.\nThe third digit is for smaller fixes and edits. These things are likely to be invisible except in specific, niche situations.\n\nThe difference between the second and the third level of importance is a bit of a judgement call on my part, but I try to use it to communicate the urgency of the update.\nIn general I recommend that you always update to the latest version, so that everyone is using the same version and I don’t have to trouble-shoot errors across a range of versions. But you can use this information about version numbers to judge whether you need to download an update immediately or if it can wait until you’re less busy."
  }
]