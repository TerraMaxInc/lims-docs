---
title: "Tech Overview"
---

## Summary

The LIMS project boils down, essentially, to a user application and a central database of data. 

![Diagram of General Structure](../../images/lims_structure.png)

Though it is possible to interact with the database data directly using SQL queries, but most users will only work through the application, which streamlines common tasks and provides a graphic interface.  The application is installed on each user's computer.

The database is stored on a local server machine onsite.  All copies of the application view and edit the same data so users can collaborate in documeting production, each tracking their individual parts in the interconnected process.

The system uses *Integrated Security*, also called *Windows Authentication* to determine if and what a user should be able to access in the SQL Server.  The user has a Windows login that they use to log on to the computer itself, and this same login identity is recognized in the Server .  This means that the user doesn't have to log in a second time to use the database; their original computer login gives them access.

## Application

The application is installed on each user's computer.  It consists of two files: `LIMS.exe` and `config.json`.  These two files need to be stored together in the same folder in order to work; LIMS.exe looks for config.json when it starts up and expects to find it in its same folder.  

There are only these two files.  Many applications will install a variety of configuration and support files in system folders, but for this project I wanted users to be able to keep track of what was on their computer, and be able to delete everything cleanly without worrying about leftover pieces. 

**If you delete these two files, then you have fully removed the program from your computer with no further cleanup necessary**

### config.json 

A simple text file (.json tells the system to use it in certain ways, but you can view it like a .txt) containing settings that can be changed.  The application references this file on startup to tell it what settings to use.  These settings include some that you can change from within the app:

- `UseTestMode` - true or false, determines whether it connects to the real database or uses a small set of internal "test data"
- `IsReadOnly` - true or false, determines whether the user can save to the database or just view what's already there
- `DataTimeSpan` - a number representing days, determines the date range of past data that the application fetches.  It defaults to 365 (1 year) to save space and make the app run faster, but it's possible to change to a longer range if you need to view older data.

The file also contains the `connectionString`, which you cannot change from the app.  The connection string tells the app how to find the database, and should usually be left alone.  If there are connection issues, a database admin might want to edit this value.

### LIMS.exe

The entire self-contained app, appart from a few settings.  This application uses C# in the WPF framework on the .NET platform.

#### .NET

- WPF

- C# is 




## SQL Server

### Database

### Users


## Microsoft Login Identity...?


Two parts, how they interact, where they live

App
brief summary/list of things: .NET, C#, WPF, EFCore

Database
SQL Server